import{ag as v,ah as g}from"./index.42094ac4.js";function b(e){return e<.5?4*e*e*e:.5*Math.pow(2*e-2,3)+1}function h(e){const n=e-1;return n*n*n+1}function w(e,{delay:n=0,duration:c=400,easing:o=b,amount:i=5,opacity:t=0}={}){const s=getComputedStyle(e),a=+s.opacity,d=s.filter==="none"?"":s.filter,r=a*(1-t),[p,$]=g(i);return{delay:n,duration:c,easing:o,css:(y,f)=>`opacity: ${a-r*f}; filter: ${d} blur(${f*p}${$});`}}function C(e,{delay:n=0,duration:c=400,easing:o=v}={}){const i=+getComputedStyle(e).opacity;return{delay:n,duration:c,easing:o,css:t=>`opacity: ${t*i}`}}function F(e,{delay:n=0,duration:c=400,easing:o=h,x:i=0,y:t=0,opacity:s=0}={}){const a=getComputedStyle(e),d=+a.opacity,r=a.transform==="none"?"":a.transform,p=d*(1-s),[$,y]=g(i),[f,_]=g(t);return{delay:n,duration:c,easing:o,css:(u,m)=>`
			transform: ${r} translate(${(1-u)*$}${y}, ${(1-u)*f}${_});
			opacity: ${d-p*m}`}}function S(e,{delay:n=0,duration:c=400,easing:o=h,axis:i="y"}={}){const t=getComputedStyle(e),s=+t.opacity,a=i==="y"?"height":"width",d=parseFloat(t[a]),r=i==="y"?["top","bottom"]:["left","right"],p=r.map(l=>`${l[0].toUpperCase()}${l.slice(1)}`),$=parseFloat(t[`padding${p[0]}`]),y=parseFloat(t[`padding${p[1]}`]),f=parseFloat(t[`margin${p[0]}`]),_=parseFloat(t[`margin${p[1]}`]),u=parseFloat(t[`border${p[0]}Width`]),m=parseFloat(t[`border${p[1]}Width`]);return{delay:n,duration:c,easing:o,css:l=>`overflow: hidden;opacity: ${Math.min(l*20,1)*s};${a}: ${l*d}px;padding-${r[0]}: ${l*$}px;padding-${r[1]}: ${l*y}px;margin-${r[0]}: ${l*f}px;margin-${r[1]}: ${l*_}px;border-${r[0]}-width: ${l*u}px;border-${r[1]}-width: ${l*m}px;`}}function k(e,{delay:n=0,duration:c=400,easing:o=h,start:i=0,opacity:t=0}={}){const s=getComputedStyle(e),a=+s.opacity,d=s.transform==="none"?"":s.transform,r=1-i,p=a*(1-t);return{delay:n,duration:c,easing:o,css:($,y)=>`
			transform: ${d} scale(${1-r*y});
			opacity: ${a-p*y}
		`}}function U(e,{delay:n=0,speed:c,duration:o,easing:i=b}={}){let t=e.getTotalLength();const s=getComputedStyle(e);return s.strokeLinecap!=="butt"&&(t+=parseInt(s.strokeWidth)),o===void 0?c===void 0?o=800:o=t/c:typeof o=="function"&&(o=o(t)),{delay:n,duration:o,easing:i,css:(a,d)=>`
			stroke-dasharray: ${t};
			stroke-dashoffset: ${d*t};
		`}}export{S as a,F as b,w as c,U as d,C as f,k as s};
